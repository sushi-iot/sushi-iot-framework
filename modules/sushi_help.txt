*This_help_version: 2025-10-22*  
*Compatibility: sushi-iot_v25.10.25.0*  

## GENERAL INFO ##

**CORE MODULE**  

* `sushi` is the core module.  
* All calls to the core module `sushi.cmd("command",...)` return a tuple: (`err`:int, `result`:var)  
  - if `err` = 0   => OK, `result` contains the command-specific value  
  - if `err` != 0  => ERROR, `result` contains the error message (str)  

**FROZEN MODULES**  

* Integrated "frozen" `.py` modules are:
  - `sushi_menu` : User menu management  
  - `sushi_utils` : System setup, status & utilities  


**ONLINE DOC**

* [Sushi-IoT documentation]("https://sushi-iot.github.io/sushi-iot-framework/")
* [GitHub-Home]("https://github.com/sushi-iot/sushi-iot-framework")
* [GitHub-Examples]("https://github.com/sushi-iot/sushi-iot-framework/tree/main/examples")

---
## SYSTEM ##
* `sushi.cmd("help")` -> str   
  Show this help
* `sushi.cmd("ver")` -> str  
  Show the firmware version
* `sushi.cmd("restart" [, delay_ms:int=2000])`  
  Restart the board after the optional delay in milliseconds
* `sushi.cmd("set_log", level:int [0=disable,1=enable,255=extended])`  
  Enable or disable REPL logging
* `sushi.cmd("factory_reset")`  
  Restore factory default settings
* `sushi.cmd("log", (type:str ['E'=error,'S'=status,'D'=debug,'X'=event] , entry:str))`  
  Add an entry to LOG
* `sushi.cmd("register", code:str)`  
  Register the device with a unique 64-character code

---  
## SETUP & STATUS ##
* `sushi_utils.get_sushi_config()` -> dict or None (if error)  
  Return full configuration structure
* `sushi_utils.set_sushi_config(settings:dict )` -> int [0 = value not changed ; 1 = value changed no restart ; 2 = value changed need restart; < 0 = error]  
  Set configuration parameters (self restart if settings changed).
* `sushi_utils.list_params(module:str ['system' , 'wifi'])`  
  List the available configuration params
* `sushi_utils.get_sushi_status()` -> dict or None (if error)  
  Return full status structure
* `sushi_utils.load_setting(module:str, setting_str)`  -> str or int or None (if error)  
  Load a custom configuration parameter
* `sushi_utils.save_setting(module:str, setting:str, value:int or str)`  -> int [0 = value not changed ; 1 = value changed ; < 0 = error]  
  Save a custom configuration parameter  

---
## WIFI COMMANDS ##
* `sushi.cmd("wifi_stop")`  
  Stop wifi management
* `sushi.cmd("wifi_restart")`  
  Restart wifi management
* Configuration: see "SETUP & STATUS" section.  

---
## MODEM ##
* `sushi.cmd("set_modem_hnd", callback:func)`  
  Set a callback to handle modem events.  
  `callback` args: (a:tuple)  
    - a[0] = event type [0=SMS received, 1=Incoming call, 2=SMS TX result]  
    - a[1..] = event-specific data:  
      . if a[0] = 0 → (call_number:str, sms_text:str, time:str)  
      . if a[0] = 1 → (call_number:str)  
      . if a[0] = 2 → (id:int, tx_result:int [1=OK, 0=ERROR])  
* `sushi.cmd("send_sms", (text:str, number:str))` -> int  
  Send an SMS message; returns the SMS ID if command accepted

---
## POWER ##
* `sushi.cmd("read_power_state")` -> int [1=ON, 0=OFF]  
  Get the main power state
* `sushi.cmd("read_power_voltage")` -> float (V)  
  Read the main power voltage
* `sushi.cmd("read_batt_level")` -> float (perc)  
  Get the battery level in percent
* `sushi.cmd("read_batt_voltage")` -> float (V)  
  Read the battery voltage
 
---
## MENU ##

**Submenu class in `sushi_menu` module**
    
* `Submenu(menu_title:str)`  
  Create a new "Submenu" item
* Submenu methods:  
  - `add_enum_editable_item(name, onchange , value_index , *values)`  
    Add an entry with a selectable list of values  
    Args:  
      . name (str)        : entry name shown in the menu  
      . onchange (func)   : callback called when value changes  
      . value_index (int) : initial value index (0,1,2,...)  
      . *values (str...)  : list of values (e.g. "OFF","ON")  
    Returns:  
      id (int) : new menu entry ID  
  - `add_read_only_item(name, onprint)`  
    Add a read-only entry  
    Args:  
      . name (str)       : entry name shown in the menu  
      . onprint (func)   : callback called to print the value  
    Returns:  
      id (int) : new menu entry ID  
* Example: see [menu_example.py](https://github.com/sushi-iot/sushi-iot-framework/tree/main/examples)  
	  
---
## GPIO & SENSORS ##
* `sushi_utils.pinout()` -> str  
  Return the board pinout for integrated & general purpose functions
* `sushi.cmd("read_temperature", sensor:int [0=DS18B20-1,1=DS18B20-2])` -> float (°C)  
  Read temperature from the selected sensor
* `sushi.cmd("read_ext_gpin", source:int [0=IO-Expander])` -> int (status)  
  Read external digital input from the specified source
* `sushi.cmd("set_ext_gpin_int", callback:func)`  
  Set a callback to detect changes in external input state
  `callback` args :(source:int [0 = IO-Expander])
* `sushi.cmd("set_out_state", (name:str ["RELAY_1..N" , "BUZZER" , "GPIO_1..N" , ... ] , state:int [0 ,1]))`  
  Set digital out state by name
* `sushi.cmd("add_out", (name:str  , pin:int))`  
  Set a pin as out and link to a name
